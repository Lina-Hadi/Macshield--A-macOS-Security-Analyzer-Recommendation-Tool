import streamlit as st
import subprocess
import json
from datetime import datetime

# Import des modules de scan
from app.lynis_scanner import run_lynis_scan


# Configuration de la page
st.set_page_config(
    page_title="MacSecure",
    page_icon="üõ°Ô∏è"
)

# CSS simplifi√©
st.markdown("""
<style>
    .header { color: #0066cc; text-align: center; }
    .secure { color: #34c759; font-weight: bold; }
    .warning { color: #ff9500; font-weight: bold; }
    .critical { color: #ff3b30; font-weight: bold; }
</style>
""", unsafe_allow_html=True)

# Titre
st.markdown("<h1 class='header'>üõ°Ô∏è MacSecure</h1>", unsafe_allow_html=True)
st.markdown("### Analyse de s√©curit√© simple pour macOS")

# Fonctions pour ex√©cuter les scripts
def run_sip_analyzer():
    try:
        result = subprocess.run(['python', 'app/sip_analyzer.py'], 
                              capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except Exception as e:
        return {"error": str(e), "secure": False}

def run_firewall_checker():
    try:
        result = subprocess.run(['python', 'app/firewall_checker.py'], 
                              capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except Exception as e:
        return {"error": str(e), "secure": False}

def run_update_checker():
    try:
        result = subprocess.run(['python', 'app/update_checker.py'], 
                              capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except Exception as e:
        return {"error": str(e), "secure": False}

def run_malwarebytes_scan():
    try:
        apple_script = 'tell application "Malwarebytes" to activate'
        subprocess.run(["osascript", "-e", apple_script])
        return "Malwarebytes est en cours d'ex√©cution. Veuillez v√©rifier l'application pour les r√©sultats."
    except Exception as e:
        return f"Erreur: {e}"

# Cr√©ation des onglets
tab1, tab2 = st.tabs(["Analyse Rapide", "Outils Avanc√©s"])

with tab1:
    st.markdown("### Analyse Rapide de S√©curit√©")
    st.write("Ex√©cutez une analyse rapide pour v√©rifier les param√®tres de s√©curit√© essentiels de votre Mac.")
    
    if st.button("Lancer l'Analyse Rapide"):
        with st.spinner("Analyse de votre syst√®me en cours..."):
            # Cr√©ation de colonnes pour les r√©sultats
            col1, col2 = st.columns(2)
            
            # V√©rification SIP
            with col1:
                st.markdown("#### Protection d'Int√©grit√© Syst√®me")
                sip_result = run_sip_analyzer()
                if "error" in sip_result:
                    st.error(f"Erreur lors de la v√©rification du SIP: {sip_result['error']}")
                else:
                    if sip_result.get("secure", False):
                        st.markdown("<p>Statut: <span class='secure'>ACTIV√â ‚úì</span></p>", unsafe_allow_html=True)
                    else:
                        st.markdown("<p>Statut: <span class='critical'>D√âSACTIV√â ‚ö†Ô∏è</span></p>", unsafe_allow_html=True)
                        # Ligne corrig√©e ci-dessous
                        st.markdown(f"Recommandation: {sip_result.get('recommendation', 'Activer la Protection d Int√©grit√© Syst√®me')}")
            
            # V√©rification Firewall
            with col2:
                st.markdown("#### Pare-feu")
                firewall_result = run_firewall_checker()
                if "error" in firewall_result:
                    st.error(f"Erreur lors de la v√©rification du pare-feu: {firewall_result['error']}")
                else:
                    if firewall_result.get("secure", False):
                        st.markdown("<p>Statut: <span class='secure'>ACTIV√â ‚úì</span></p>", unsafe_allow_html=True)
                    else:
                        st.markdown("<p>Statut: <span class='critical'>D√âSACTIV√â ‚ö†Ô∏è</span></p>", unsafe_allow_html=True)
                        if "recommendations" in firewall_result:
                            for rec in firewall_result["recommendations"]:
                                st.markdown(f"- {rec}")
            
            st.markdown("---")
            
            # V√©rification des mises √† jour
            st.markdown("#### Mises √† jour logicielles")
            update_result = run_update_checker()
            if "error" in update_result:
                st.error(f"Erreur lors de la v√©rification des mises √† jour: {update_result['error']}")
            else:
                if update_result.get("secure", False):
                    st.markdown("<p>Statut: <span class='secure'>√Ä JOUR ‚úì</span></p>", unsafe_allow_html=True)
                else:
                    update_count = update_result.get("total_updates", 0)
                    security_count = update_result.get("security_update_count", 0)
                    st.markdown(f"<p>Statut: <span class='warning'>{update_count} MISES √Ä JOUR DISPONIBLES</span> ({security_count} mises √† jour de s√©curit√©)</p>", unsafe_allow_html=True)
                    st.markdown(f"Recommandation: {update_result.get('recommendation', 'Installer les mises √† jour de s√©curit√© en attente')}")

with tab2:
    st.markdown("### Outils de S√©curit√© Avanc√©s")
    
    tool_option = st.selectbox(
        "Choisissez un outil de s√©curit√© √† ex√©cuter:",
        [
            "S√©lectionnez un outil",
            "Analyse Lynis",
            "Scan Malwarebytes"
        ]
    )
    
    if tool_option != "S√©lectionnez un outil" and st.button(f"Ex√©cuter {tool_option}"):
        with st.spinner(f"Ex√©cution de {tool_option}. Cela peut prendre plusieurs minutes..."):
            if tool_option == "Analyse Lynis":
                output = run_lynis_scan()
                st.markdown("#### R√©sultats de l'analyse Lynis")
                st.text_area("Sortie", output, height=300)
                
            elif tool_option == "Scan Malwarebytes":
                output = run_malwarebytes_scan()
                st.markdown("#### Malwarebytes")
                st.info(output)

# Bouton pour g√©n√©rer un rapport
# Bouton pour g√©n√©rer un rapport
if st.button("G√©n√©rer un rapport de s√©curit√©"):
    with st.spinner("G√©n√©ration du rapport de s√©curit√©..."):
        # Ex√©cution des analyses de s√©curit√©
        sip_result = run_sip_analyzer()
        firewall_result = run_firewall_checker()
        update_result = run_update_checker()
        lynis_result = run_lynis_scan()
        malwarebytes_result = run_malwarebytes_scan()
        
        # Construction du rapport texte
        report_content = f"""Rapport de S√©curit√© MacSecure
G√©n√©r√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

√âTAT DE LA S√âCURIT√â:
- Protection d'Int√©grit√© Syst√®me: {"ACTIV√â" if sip_result.get("secure", False) else "D√âSACTIV√â"}
- Configuration du pare-feu: {"ACTIV√â" if firewall_result.get("secure", False) else "D√âSACTIV√â"}
- Mises √† jour logicielles: {"√Ä JOUR" if update_result.get("secure", False) else f"{update_result.get('total_updates', 0)} MISES √Ä JOUR DISPONIBLES"}

ANALYSE AVANC√âE:
- R√©sultats de Lynis:
{lynis_result if lynis_result else "Aucun r√©sultat disponible"}

- Malwarebytes:
{malwarebytes_result if malwarebytes_result else "Aucun r√©sultat disponible"}
"""
        
        # Affichage du rapport
        st.markdown("## Rapport de S√©curit√© MacSecure")
        st.markdown(f"G√©n√©r√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # T√©l√©chargement du rapport
        st.download_button(
            label="T√©l√©charger le rapport (TXT)",
            data=report_content,
            file_name=f"macsecure_rapport_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain"
        )

# Pied de page
st.markdown("---")
st.markdown("MacSecure - Protection pour votre Mac")